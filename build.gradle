plugins{
	id "org.springframework.boot" version "2.2.4.RELEASE" apply false
}

ext {
	jaxrs = "2.1.1"
	cxf = "3.3.5"
	junit = "5.6.0"
	mockito = "3.2.4"
	spring = "2.2.4.RELEASE"
}

allprojects{
	apply plugin: "eclipse"

	repositories {
		mavenCentral()
	}

	group = 'com.github.arucard21.simplyrestful'
	version = '0.10.3'
}

subprojects{
	apply plugin: "java"

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	test {
		useJUnitPlatform()
	}
	
	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
			}
		}
	}
	
	configurations {
		integrationTestImplementation{
			extendsFrom testImplementation
			canBeResolved = true
		}
		integrationTestRuntime.extendsFrom testRuntime
	}
	
	task integrationTest(type:Test){
		useJUnitPlatform()
		setTestClassesDirs(project.sourceSets.integrationTest.output.getClassesDirs())
		classpath = project.sourceSets.integrationTest.runtimeClasspath
	}
	
	eclipse {
		classpath {
			plusConfigurations += [configurations.integrationTestImplementation]
		}
	}
}

configure(allprojects - project(":examples").allprojects){
	apply plugin: 'java-library'
}

configure(project(":examples").allprojects){
	apply plugin: 'application'
}

project(":SimplyRESTful-resources"){
	project.description = "The core API resources used in SimplyRESTful APIs"
	dependencies {
		api ("io.openapitools.jackson.dataformat:jackson-dataformat-hal:1.0.4")
		api ("io.openapitools.hal:swagger-hal:1.0.4"){
			exclude group: "javax.ws.rs"
		}

		testImplementation ("org.junit.jupiter:junit-jupiter-api:${junit}")
		testImplementation ("org.junit.jupiter:junit-jupiter-engine:${junit}")
		testImplementation ("org.junit.platform:junit-platform-launcher:1.5.2")
		testImplementation ("org.glassfish.jersey.containers:jersey-container-servlet:2.27")
		testImplementation ("nl.jqno.equalsverifier:equalsverifier:3.1.12")
	}
}

project(":SimplyRESTful"){
	project.description = "A framework for creating a RESTful API"
	dependencies {
		api project(":SimplyRESTful-resources")
		api ("javax.inject:javax.inject:1")
		api ("javax.ws.rs:javax.ws.rs-api:${jaxrs}")
		api ("javax.validation:validation-api:2.0.1.Final")
		api ("io.swagger:swagger-annotations:1.5.21")

		testImplementation ("org.mockito:mockito-core:${mockito}")
		testImplementation ("org.mockito:mockito-junit-jupiter:${mockito}")
		testImplementation ("org.junit.jupiter:junit-jupiter-api:${junit}")
		testImplementation ("org.junit.jupiter:junit-jupiter-engine:${junit}")
		testImplementation ("org.junit.platform:junit-platform-launcher:1.5.2")
		testImplementation ("org.glassfish.jersey.containers:jersey-container-servlet:2.27")
		testImplementation ("nl.jqno.equalsverifier:equalsverifier:3.1.12")
		
		integrationTestImplementation ("org.apache.cxf:cxf-rt-transports-local:${cxf}")
		integrationTestImplementation ("org.apache.cxf:cxf-rt-frontend-jaxrs:${cxf}")
		integrationTestImplementation ("org.apache.cxf:cxf-rt-rs-client:${cxf}")
	}
}

project(":client"){
	project.description = "A generic client that can be used with any SimplyRESTful API"
	dependencies {
		api project(":SimplyRESTful-resources")
		api ("javax.json:javax.json-api:1.1.4")
		api ("org.glassfish.jersey.core:jersey-client:2.27")
		api ("io.swagger:swagger-models:1.5.21")
		api ("io.swagger.parser.v3:swagger-parser:2.0.17")
		api ("org.glassfish.jersey.inject:jersey-hk2:2.27")
		
		runtimeOnly ("org.glassfish:javax.json:1.1.4")
		
		integrationTestImplementation project(":SimplyRESTful")
		integrationTestImplementation project(":deploy-jetty-cxf")
		integrationTestImplementation ("org.apache.cxf:cxf-rt-transports-http-jetty:${cxf}")
		integrationTestImplementation ("org.mockito:mockito-core:${mockito}")
		integrationTestImplementation ("org.mockito:mockito-junit-jupiter:${mockito}")
		integrationTestImplementation ("org.junit.jupiter:junit-jupiter-api:${junit}")
		integrationTestImplementation ("org.junit.jupiter:junit-jupiter-engine:${junit}")
		integrationTestImplementation ("org.junit.platform:junit-platform-launcher:1.5.2")
	}
}

project(":deploy-springboot-cxf"){
	project.description = "Easily deploy your SimplyRESTful API using Apache CXF with Spring Boot"
	dependencies {
		api project(":SimplyRESTful")
		api ("org.webjars:swagger-ui:2.2.6")
		api ("org.apache.cxf:cxf-spring-boot-starter-jaxrs:${cxf}")
		api ("org.apache.cxf:cxf-rt-rs-service-description-swagger:${cxf}")
		api ("org.apache.cxf:cxf-rt-rs-extension-search:${cxf}")
	}
}

project(":deploy-springboot-jersey"){
	project.description = "Easily deploy your SimplyRESTful API using Jersey with Spring Boot"
	dependencies {
		api project(':SimplyRESTful')
		api ("org.springframework.boot:spring-boot:${spring}")
		api ("org.webjars:swagger-ui:2.2.6")
		api ("org.springframework.boot:spring-boot-starter-jersey:${spring}"){
			exclude group: "org.glassfish.jersey.media", module: "jersey-media-json-jackson"
		}
		api ("io.swagger:swagger-jersey2-jaxrs:1.5.21")
	}
}

project(":deploy-jetty-cxf"){
	project.description = "Easily deploy your SimplyRESTful API using Apache CXF"
	dependencies {
		api project(':SimplyRESTful')
		api ("org.apache.cxf:cxf-rt-frontend-jaxrs:${cxf}")
		api ("jakarta.xml.ws:jakarta.xml.ws-api:2.3.2")
		api ("org.apache.cxf:cxf-rt-rs-service-description-swagger:${cxf}")
		api ("org.apache.cxf:cxf-rt-rs-extension-search:${cxf}")
		api ("org.webjars:swagger-ui:2.2.6")
		api ("ch.qos.logback:logback-classic:1.2.1")
		api ("org.hibernate:hibernate-validator:5.4.0.Final")
		api ("org.glassfish:javax.el:3.0.1-b08")
	}
}

project(":persist-springdata"){
	project.description = "Easily persist your SimplyRESTful API using Spring Data"
	dependencies {
		api project(':SimplyRESTful')
		api ("org.springframework.boot:spring-boot-starter-data-jpa:${spring}")
	}
}

project(":examples:jetty-cxf"){
	project.description = "Example project for a SimplyRESTful API using Apache CXF on Jetty"

	application{
		mainClassName = "example.jetty.ExampleCXFJettyServer"
	}

	dependencies {
		implementation project(':SimplyRESTful')
		implementation project(':deploy-jetty-cxf')
		implementation ("org.apache.cxf:cxf-rt-transports-http-jetty:${cxf}")
	}
	uploadArchives.enabled = false;
}

project(":examples:springboot-cxf"){
	apply plugin: "org.springframework.boot"

	application{
		mainClassName = "example.springboot.ExampleCXFApplication"
	}

	project.description = "Example project for a SimplyRESTful API using Apache CXF with Spring Boot"
	dependencies {
		implementation project(':SimplyRESTful')
		implementation project(':deploy-springboot-cxf')
	}
	uploadArchives.enabled = false;
}

project(":examples:springboot-jersey-nomapping-springdata"){
	apply plugin: "org.springframework.boot"

	project.description = "Example project for a SimplyRESTful API using Jersey with Spring Boot and directly stored with Spring Data"

	application{
		mainClassName = "example.jersey.nomapping.JerseyNoMappingApplication"
	}

	dependencies {
		implementation project(':deploy-springboot-jersey')
		implementation project(':persist-springdata')
		implementation ("com.h2database:h2:1.4.197")
	}
	uploadArchives.enabled = false;
}

// Provide tasks to publish projects to Maven Central
configure(subprojects - project(":examples").allprojects){
	apply plugin: 'maven'
	apply plugin: 'signing'
	
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	signing {
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment ->
					signing.signPom(deployment)
				}

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name project.name
					packaging 'jar'

					description project.description
					url = 'https://github.com/arucard21/SimplyRESTful-Framework'

					scm {
						connection 'scm:git:git://github.com:arucard21/SimplyRESTful-Framework.git'
						developerConnection 'scm:git:ssh://github.com:arucard21/SimplyRESTful-Framework.git'
						url 'https://github.com/arucard21/SimplyRESTful-Framework'
					}

					licenses {
						license {
							name 'GNU Lesser General Public License'
							url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
						}
					}

					developers {
						developer {
							name 'Riaas Mokiem'
							email 'arucard21@gmail.com'
							organizationUrl 'https://github.com/arucard21'
						}
					}
				}
			}
		}
	}
}
